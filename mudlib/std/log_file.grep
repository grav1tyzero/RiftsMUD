living.c:	log_file("override_exp",

living.c:	log_file("override_exp", sprintf("By: %s  Euid: %s\n",

living.c:	log_file("stats", query_name()+" went from "+stats[str]+" to "+x+

living.c:	log_file("stats", "uid: "+getuid(previous_object())+" ("+

living.c:    log_file("paths", query_name()+": "+dir+" ("+ctime(time())+")\n");

living.c:	log_file("exp",

living.c:	log_file("exp",

living.c:	log_file("dev", query_name() + " received " + x + " dev points from "+

living.c:	log_file("dev", "Uid: "+geteuid(previous_object())+" "+

living.c:	log_file("exp",

living.c:	log_file("exp", 

money.c:    log_file("money", this_object()->query_name()+" received "+

money.c:    log_file("money", ctime(time())+"\n");

quest.log:user.c:    log_file("reset_quests", sprintf("Quests reset for: %s\nBy:%s UID: %s\n%s\n",

quest.log:user.c:	log_file("reset_quests", "By: "+(string)this_player()->query_name()+"\n");

quest.log:user.c:    log_file("quests", query_name()+" completed "+str+": "+ctime(time())+"\n");

quest.log:user.c:	log_file("quests", query_name() + " received "+sprintf("%d quest points ",

quest.log:user.c:    log_file("quests", query_name()+" completed mini-quest "+str+" "+ctime(time())+" for "+x+" exp.\n");

quest.log:user.c2:    log_file("reset_quests", sprintf("Quests reset for: %s\nBy:%s UID: %s\n%s\n",

quest.log:user.c2:	log_file("reset_quests", "By: "+(string)this_player()->query_name()+"\n");

quest.log:user.c2:    log_file("quests", query_name()+" completed "+str+": "+ctime(time())+"\n");

quest.log:user.c2:	log_file("quests", query_name() + " received "+sprintf("%d quest points ",

quest.log:user.c2:    log_file("quests", query_name()+" completed mini-quest "+str+" "+ctime(time())+" for "+x+" exp.\n");

quest.log:user.new.c:    log_file("reset_quests", sprintf("Quests reset for: %s\nBy:%s UID: %s\n%s\n",

quest.log:user.new.c:	log_file("reset_quests", "By: "+(string)this_player()->query_name()+"\n");

quest.log:user.new.c:    log_file("quests", query_name()+" completed "+str+": "+ctime(time())+"\n");

quest.log:user.new.c:	log_file("quests", query_name() + " received "+sprintf("%d quest points ",

quest.log:user.new.c:    log_file("quests", query_name()+" completed mini-quest "+str+" "+ctime(time())+" for "+x+" exp.\n");

user.c:    log_file("enter", ob->query_name() + " (quit): " + ctime(time()) + "\n");

user.c:        log_file("driver/seclog", "enable_wizard^"+this_object()->query_name()+"^"+getuid(previous_object()) + "^" + ctime(time()) + "^" +this_object()->query_ip()+"^SETUP\n");

user.c:    log_file("enter", query_name()+" (enter): "+ctime(time())+" from "+

user.c:	log_file("set_"+replace_string(idx, " ", "_"),

user.c:	    log_file("set_"+replace_string(idx, " ", "_"),

user.c:    log_file("driver/seclog", "set_position^"+this_object()->query_name()+"^"+getuid(previous_object()) + "^" + ctime(time()) + "^" +this_object()->query_ip());

user.c:      log_file("driver/seclog", "^FAIL"+"\n");

user.c:	    log_file("driver/seclog", "^SUCCESS"+"\n");

user.c:            log_file("driver/seclog", "enable_wizard^"+this_object()->query_name()+"^"+getuid(previous_object()) + "^" + ctime(time()) + "^" +this_object()->query_ip()+"^SET_POSITION\n");

user.c:    if(!ovrd) log_file("driver/seclog", "^SUCCESS"+"\n");

user.c:    log_file("advance", this_object()->query_name()+" advanced to level "+lev+": "+ctime(time())+"\n");

user.c:    log_file("reset_quests", sprintf("Quests reset for: %s\nBy:%s UID: %s\n%s\n",

user.c:	log_file("reset_quests", "By: "+(string)this_player()->query_name()+"\n");

user.c:    log_file("quests", query_name()+" completed "+str+": "+ctime(time())+"\n");

user.c:	log_file("quests", query_name() + " received "+sprintf("%d quest points ",

user.c:    log_file("quests", query_name()+" completed mini-quest "+str+" "+ctime(time())+" for "+x+" exp.\n");

user.c2:    log_file("enter", ob->query_name() + " (quit): " + ctime(time()) + "\n");

user.c2:        log_file("driver/security", "enable_wizard^"+this_object()->query_name()+"^"+getuid(previous_object()) + "^" + ctime(time()) + "^" +this_object()->query_ip()+"\n");

user.c2:    log_file("enter", query_name()+" (enter): "+ctime(time())+" from "+

user.c2:	log_file("set_"+replace_string(idx, " ", "_"),

user.c2:	    log_file("set_"+replace_string(idx, " ", "_"),

user.c2:    log_file("driver/security", "set_position^"+this_object()->query_name()+"^"+getuid(previous_object()) + "^" + ctime(time()) + "^" +this_object()->query_ip());

user.c2:      log_file("driver/security", "^FAIL"+"\n");

user.c2:    log_file("driver/security", "^SUCCESS"+"\n");

user.c2:    log_file("advance", this_object()->query_name()+" advanced to level "+lev+": "+ctime(time())+"\n");

user.c2:    log_file("reset_quests", sprintf("Quests reset for: %s\nBy:%s UID: %s\n%s\n",

user.c2:	log_file("reset_quests", "By: "+(string)this_player()->query_name()+"\n");

user.c2:    log_file("quests", query_name()+" completed "+str+": "+ctime(time())+"\n");

user.c2:	log_file("quests", query_name() + " received "+sprintf("%d quest points ",

user.c2:    log_file("quests", query_name()+" completed mini-quest "+str+" "+ctime(time())+" for "+x+" exp.\n");

user.new.c:    log_file("enter", ob->query_name() + " (quit): " + ctime(time()) + "\n");

user.new.c:    log_file("enter", query_name()+" (enter): "+ctime(time())+" from "+

user.new.c:	log_file("set_"+replace_string(idx, " ", "_"),

user.new.c:	    log_file("set_"+replace_string(idx, " ", "_"),

user.new.c:    log_file("advance", this_object()->query_name()+" advanced to level "+lev+": "+ctime(time())+"\n");

user.new.c:    log_file("reset_quests", sprintf("Quests reset for: %s\nBy:%s UID: %s\n%s\n",

user.new.c:	log_file("reset_quests", "By: "+(string)this_player()->query_name()+"\n");

user.new.c:    log_file("quests", query_name()+" completed "+str+": "+ctime(time())+"\n");

user.new.c:	log_file("quests", query_name() + " received "+sprintf("%d quest points ",

user.new.c:    log_file("quests", query_name()+" completed mini-quest "+str+" "+ctime(time())+" for "+x+" exp.\n");

