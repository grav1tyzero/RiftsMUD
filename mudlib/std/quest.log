npc_shop.c:    say_this("Oops, there is a bug with the object you requested.", who);
quest_ob.c://	quest_ob.c
quest_ob.c://	an inheritable quest object
quest_ob.c:void set_quest_points(int x);
quest_ob.c:int query_quest_points();
quest_ob.c:int quest_points;
quest_ob.c:void set_quest_points(int x) { quest_points = x; }
quest_ob.c:int query_quest_points() { return quest_points; }
user.c:mapping mini_quests;
user.c:string *quests;
user.c:int set_mini_quest(string str, int x, string desc);
user.c:int set_quest(string str);
user.c:string *query_mini_quests();
user.c:mapping get_mini_quest_map();
user.c:string *query_quests();
user.c:string *query_quests() {
user.c:    if(!quests) quests = ({});
user.c:    return quests;
user.c:nomask void reset_quests() {
user.c:    log_file("reset_quests", sprintf("Quests reset for: %s\nBy:%s UID: %s\n%s\n",
user.c:	log_file("reset_quests", "By: "+(string)this_player()->query_name()+"\n");
user.c:    player_data["general"]["quest points"] = 0;
user.c:    quests = ({});
user.c:int set_quest(string str) {
user.c:    if(!quests) quests = ({});
user.c:    if(member_array(str, quests) != -1) return 0;
user.c:    player_data["general"]["quest points"] += (int)call_other(ROOM_QUEST, "query_quest_points", str);
user.c:    quests += ({ str });
user.c:    log_file("quests", query_name()+" completed "+str+": "+ctime(time())+"\n");
user.c:void add_quest_points(int pts) {
user.c:    if(!player_data["general"]["quest points"])
user.c:	player_data["general"]["quest points"] = 0;
user.c:    player_data["general"]["quest points"] += pts;
user.c:	log_file("quests", query_name() + " received "+sprintf("%d quest points ",
user.c:int query_quest_points() {
user.c:    if(!player_data["general"]["quest points"]) return 0;
user.c:    else return player_data["general"]["quest points"];
user.c:int set_mini_quest(string str, int x, string desc) {
user.c:    if(!mini_quests) mini_quests = ([]);
user.c:    if(mini_quests[str]) return 0;
user.c:    else mini_quests[str] = ({ time(), desc });
user.c:    log_file("quests", query_name()+" completed mini-quest "+str+" "+ctime(time())+" for "+x+" exp.\n");
user.c:string *query_mini_quests() {
user.c:    if(!mini_quests) return ({});
user.c:    else return keys(mini_quests);
user.c:mapping query_mini_quest_map() { return (mini_quests ? mini_quests : ([])); }
user.c2:mapping mini_quests;
user.c2:string *quests;
user.c2:int set_mini_quest(string str, int x, string desc);
user.c2:int set_quest(string str);
user.c2:string *query_mini_quests();
user.c2:mapping get_mini_quest_map();
user.c2:string *query_quests();
user.c2:string *query_quests() {
user.c2:    if(!quests) quests = ({});
user.c2:    return quests;
user.c2:nomask void reset_quests() {
user.c2:    log_file("reset_quests", sprintf("Quests reset for: %s\nBy:%s UID: %s\n%s\n",
user.c2:	log_file("reset_quests", "By: "+(string)this_player()->query_name()+"\n");
user.c2:    player_data["general"]["quest points"] = 0;
user.c2:    quests = ({});
user.c2:int set_quest(string str) {
user.c2:    if(!quests) quests = ({});
user.c2:    if(member_array(str, quests) != -1) return 0;
user.c2:    player_data["general"]["quest points"] += (int)call_other(ROOM_QUEST, "query_quest_points", str);
user.c2:    quests += ({ str });
user.c2:    log_file("quests", query_name()+" completed "+str+": "+ctime(time())+"\n");
user.c2:void add_quest_points(int pts) {
user.c2:    if(!player_data["general"]["quest points"])
user.c2:	player_data["general"]["quest points"] = 0;
user.c2:    player_data["general"]["quest points"] += pts;
user.c2:	log_file("quests", query_name() + " received "+sprintf("%d quest points ",
user.c2:int query_quest_points() {
user.c2:    if(!player_data["general"]["quest points"]) return 0;
user.c2:    else return player_data["general"]["quest points"];
user.c2:int set_mini_quest(string str, int x, string desc) {
user.c2:    if(!mini_quests) mini_quests = ([]);
user.c2:    if(mini_quests[str]) return 0;
user.c2:    else mini_quests[str] = ({ time(), desc });
user.c2:    log_file("quests", query_name()+" completed mini-quest "+str+" "+ctime(time())+" for "+x+" exp.\n");
user.c2:string *query_mini_quests() {
user.c2:    if(!mini_quests) return ({});
user.c2:    else return keys(mini_quests);
user.c2:mapping query_mini_quest_map() { return (mini_quests ? mini_quests : ([])); }
user.new.c:mapping mini_quests;
user.new.c:string *quests;
user.new.c:int set_mini_quest(string str, int x, string desc);
user.new.c:int set_quest(string str);
user.new.c:string *query_mini_quests();
user.new.c:mapping get_mini_quest_map();
user.new.c:string *query_quests();
user.new.c:string *query_quests() {
user.new.c:    if(!quests) quests = ({});
user.new.c:    return quests;
user.new.c:nomask void reset_quests() {
user.new.c:    log_file("reset_quests", sprintf("Quests reset for: %s\nBy:%s UID: %s\n%s\n",
user.new.c:	log_file("reset_quests", "By: "+(string)this_player()->query_name()+"\n");
user.new.c:    player_data["general"]["quest points"] = 0;
user.new.c:    quests = ({});
user.new.c:int set_quest(string str) {
user.new.c:    if(!quests) quests = ({});
user.new.c:    if(member_array(str, quests) != -1) return 0;
user.new.c:    player_data["general"]["quest points"] += (int)call_other(ROOM_QUEST, "query_quest_points", str);
user.new.c:    quests += ({ str });
user.new.c:    log_file("quests", query_name()+" completed "+str+": "+ctime(time())+"\n");
user.new.c:void add_quest_points(int pts) {
user.new.c:    if(!player_data["general"]["quest points"])
user.new.c:	player_data["general"]["quest points"] = 0;
user.new.c:    player_data["general"]["quest points"] += pts;
user.new.c:	log_file("quests", query_name() + " received "+sprintf("%d quest points ",
user.new.c:int query_quest_points() {
user.new.c:    if(!player_data["general"]["quest points"]) return 0;
user.new.c:    else return player_data["general"]["quest points"];
user.new.c:int set_mini_quest(string str, int x, string desc) {
user.new.c:    if(!mini_quests) mini_quests = ([]);
user.new.c:    if(mini_quests[str]) return 0;
user.new.c:    else mini_quests[str] = ({ time(), desc });
user.new.c:    log_file("quests", query_name()+" completed mini-quest "+str+" "+ctime(time())+" for "+x+" exp.\n");
user.new.c:string *query_mini_quests() {
user.new.c:    if(!mini_quests) return ({});
user.new.c:    else return keys(mini_quests);
user.new.c:mapping query_mini_quest_map() { return (mini_quests ? mini_quests : ([])); }
